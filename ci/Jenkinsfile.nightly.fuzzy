pipeline {
  agent {
    dockerfile {
      label 'linux'
      dir 'ci'
    }
  }

  parameters {
    string(
      name: 'ITERATIONS',
      description: 'Name of component to build.',
      defaultValue: params.PROPTEST_CASES ?: '500000'
    )
  }

  environment {
    /* Avoid cache poisoning by other jobs. */
    GOCACHE = "${env.WORKSPACE_TMP}/go-build"
    GOPATH  = "${env.WORKSPACE_TMP}/go"
    PROPTEST_CASES = "${params.PROTEST_CASES}"
  }

  options {
    disableConcurrentBuilds()
    buildDiscarder(logRotator(
      numToKeepStr: '20',
      daysToKeepStr: '30',
    ))
  }

  stages {
    stage('Fuzztest') {
      steps {
        sh 'cargo test --test fuzz_test'
      }
      post {
        failure {
          archiveArtifacts artifacts: '**/*.proptest-regressions'
        }
      }
    }
  }

  post {
    failure {
      script {
        discordNotify(
          header: 'Nightly Fuzztest Failed. Regression files archived as job artifacts',
          cred: 'nomos-node-discord-commits-webhook',
        )
      }
    }
    success {
      script {
        discordNotify(cred: 'nomos-node-discord-commits-webhook')
      }
    }
    cleanup { cleanWs() }
  }
}

def discordNotify = load "${WORKSPACE}ci/discordNotify.groovy"
