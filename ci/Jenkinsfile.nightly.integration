pipeline {
  agent {
    dockerfile {
      label 'linux'
      dir 'ci'
    }
  }

  parameters {
    string(
      name: 'ITERATIONS',
      description: 'Number of repeated integration test runs',
      defaultValue: params.ITERATIONS ?: '1000'
    )
  }

  environment {
    /* Avoid cache poisoning by other jobs. */
    GOCACHE = "${env.WORKSPACE_TMP}/go-build"
    GOPATH  = "${env.WORKSPACE_TMP}/go"
    RUST_BACKTRACE = 1
  }

  options {
    disableConcurrentBuilds()
    buildDiscarder(logRotator(
      numToKeepStr: '20',
      daysToKeepStr: '30',
    ))
  }

  stages {
    stage('Build waku') {
      steps {
        /* Node binary is required for integration tests */
        sh 'cargo build -p nomos-node --features waku'
      }
    }

    stage('Integration tests waku') {
      steps {
        script {
          int iterations = params.ITERATIONS.toInteger()

          def tests = ['cargo test -p tests -F waku ten_nodes_happy',
                       'cargo test -p tests -F waku two_nodes_happy',
                       'cargo test -p tests -F waku ten_nodes_one_down']

          runTestCases(tests, iterations)
        }
      }
    }

    stage('Build libp2p') {
      steps {
        /* Node binary is required for integration tests */
        sh 'cargo build -p nomos-node --features libp2p'
      }
    }

    stage('Integration tests libp2p') {
      steps {
        script {
          int iterations = params.ITERATIONS.toInteger()

          def tests = ['cargo test -p tests -F libp2p ten_nodes_happy',
                       'cargo test -p tests -F libp2p two_nodes_happy',
                       'cargo test -p tests -F libp2p ten_nodes_one_down']

          runTestCases(tests, iterations)
        }
      }
    }
  }

  post {
    failure {
      script {
        def discord = load "${WORKSPACE}/ci/discord.groovy"
        discord.sendMessage(header: 'Nightly Integration Tests Failed')
      }
    }
    success {
      script {
        def discord = load "${WORKSPACE}/ci/discord.groovy"
        discord.sendMessage(header: 'Nightly Integration Tests Passed')
      }
    }
    cleanup { cleanWs() }
  }
}

def runTestCases(test_cases, iterations) {
  for (int i = 0; i < iterations; i++) {
    echo "Running iteration ${i + 1} of ${iterations}"

    for (test_case in test_cases) {
      if (sh(script: test_case, returnStatus: true) != 0) {
        error("Test '${test_case}' failed on iteration ${i + 1}")
        return
      }
    }
  }
}

