mod chain_inputs;
mod inputs;
mod proving_key;
mod verification_key;
mod wallet_inputs;
mod witness;

use std::error::Error;

pub use chain_inputs::{PolChainInputs, PolChainInputsData};
use groth16::{Groth16Input, Groth16InputDeser, Groth16Proof, Groth16ProofJsonDeser};
pub use inputs::PolWitnessInputs;
use thiserror::Error;
pub use wallet_inputs::{PolWalletInputs, PolWalletInputsData};
pub use witness::Witness;

use crate::{
    chain_inputs::PolChainInputsJson,
    inputs::{PolVerifierInput, PolVerifierInputJson},
    proving_key::POL_PROVING_KEY_PATH,
};

pub type PoLProof = Groth16Proof;

#[derive(Debug, Error)]
pub enum ProveError {
    #[error(transparent)]
    Io(std::io::Error),
    #[error(transparent)]
    Json(serde_json::Error),
    #[error("Error parsing Groth16 input: {0:?}")]
    Groth16JsonInput(<Groth16Input as TryFrom<Groth16InputDeser>>::Error),
    #[error(transparent)]
    Groth16JsonProof(<Groth16Proof as TryFrom<Groth16ProofJsonDeser>>::Error),
}

///
/// This function generates a proof for the given set of inputs.
///
/// # Arguments
/// - `inputs`: A reference to `PolInputs`, which contains the necessary data to
///   generate the witness and construct the proof.
///
/// # Returns
/// - `Ok((PoLProof, PolPublicInputs))`: On success, returns a tuple containing
///   the generated proof (`PoLProof`) and the corresponding public inputs
///   (`PolPublicInputs`).
/// - `Err(ProveError)`: On failure, returns an error of type `ProveError`,
///   which can occur due to I/O errors or JSON (de)serialization errors.
///
/// # Errors
/// - Returns a `ProveError::Io` if an I/O error occurs while generating the
///   witness or proving from contents.
/// - Returns a `ProveError::Json` if there is an error during JSON
///   serialization or deserialization.
pub fn prove(inputs: &PolWitnessInputs) -> Result<(PoLProof, PolVerifierInput), ProveError> {
    let witness = witness::generate_witness(inputs).map_err(ProveError::Io)?;
    let (proof, verifier_inputs) =
        circuits_prover::prover_from_contents(*POL_PROVING_KEY_PATH, witness.as_ref())
            .map_err(ProveError::Io)?;
    let proof: Groth16ProofJsonDeser = serde_json::from_slice(&proof).map_err(ProveError::Json)?;
    let verifier_inputs: PolVerifierInputJson =
        serde_json::from_slice(&verifier_inputs).map_err(ProveError::Json)?;
    Ok((
        proof.try_into().map_err(ProveError::Groth16JsonProof)?,
        verifier_inputs
            .try_into()
            .map_err(ProveError::Groth16JsonInput)?,
    ))
}

///
/// This function verifies a proof against a set of public inputs.
///
/// # Arguments
///
/// - `proof`: A reference to the proof (`PoLProof`) that needs verification.
/// - `public_inputs`: A reference to `PolPublicInputs`, which contains the
///   public inputs against which the proof is verified.
///
/// # Returns
///
/// - `Ok(true)`: If the proof is successfully verified against the public
///   inputs.
/// - `Ok(false)`: If the proof is invalid when compared with the public inputs.
/// - `Err`: If an error occurs during the verification process.
///
/// # Errors
///
/// - Returns an error if there is an issue with the verification key or the
///   underlying verification process fails.
pub fn verify(proof: &PoLProof, public_inputs: &PolVerifierInput) -> Result<bool, impl Error> {
    let inputs = public_inputs.to_inputs();
    groth16::groth16_verify(verification_key::POL_VK.as_ref(), proof, &inputs)
}

#[cfg(test)]
mod tests {
    use std::str::FromStr;

    use groth16::Fr;
    use num_bigint::BigUint;
    use num_traits::Zero;

    use super::*;

    #[test]
    fn test_full_flow() {
        let chain_data = PolChainInputsData {
            slot_number: 511,
            epoch_nonce: 651,
            total_stake: 5000,
            aged_root: BigUint::from_str(
                "21751706155519513154726925173568262406186712895117621074659291597257684575463",
            )
            .unwrap()
            .into(),
            latest_root: BigUint::from_str(
                "7862131129452903767067890002415909770882600921809419772454092585658568519455",
            )
            .unwrap()
            .into(),
            leader_pk: (
                BigUint::from(123_456u32).into(),
                BigUint::from(654_321u32).into(),
            ),
        };
        let wallet_data = PolWalletInputsData {
            note_value: 50,
            transaction_hash: BigUint::from_str(
                "1719720424149331152281967799691306040797205656735581366917090623747717677661",
            )
            .unwrap()
            .into(),
            output_number: 40,
            aged_path: [
                "21825484055218636389923563940420838780899740780994230739392960251046788994265",
                "1269358280504682157332240960303069183775009096667399253366618219411291937274",
                "2449367463997094299391115321882165890360930509348791339232879071252869663739",
                "20711347207538135936814142819702454906539191205527907907514113404858108242798",
                "295919906869050018209778160426117895600167699746037895798212691006563749982",
                "4269504345402728675200878831887792098754661960121960432032084239049039680515",
                "1414474321287511227848835207613770614351592303987653424957191795966977645304",
                "1284535392648604878395954904240572327689598480350918598880350067974712023968",
                "1824726003883833437332375569505764734667088683518748407748071404553233692215",
                "19337725380183393542979678602624926888255112489601490013232667732720690231562",
                "18933283664699265516746867519549360571623782284159414180581951672189721831525",
                "20926266839192622348966103669449821718625741612154976501857759898056138191510",
                "20740950172113051147158877334677414191027052756793998400265805208626367670652",
                "264290688800812996650342713302774659057800675951822619277819381080764354252",
                "19947771517560651875841770823407992579587975751967095158505454960613227373126",
                "14565698998769420703260564799687342215900661705409102607428245941342356703029",
                "10802912202610100665894116784283154663093569593668249683180290614067005763500",
                "9922555605206194151829905055212026775563329849210153713788679516109451034962",
                "8191218515211116219678453617945719745918187618130211973515504575469135738847",
                "2470364818953364220553582985297873096568243683731940013985119793856933422776",
                "11819632496490179174151407581406805658190516370222081669592221706724619190934",
                "12199885895729802408743741351145813989645980017985858727186880942676598644893",
                "17027882888306065179472477107266871619043099329634061632654562196968908455752",
                "2728575881499709621324710393348090935790713860989221764217789757419209644258",
                "8707192519498919693515456842627144883291693884141942968081135244661761462663",
                "21362908004888998168625813898098888611158781920043527245197347650197851623657",
                "4848357678941501624801731152413075928254933401656322455773564559005833113333",
                "19286664461628482490681184564854590429266904229624268887888883558529864789180",
                "15764368598912526024314003547050557814748342633530757679225434554026593068630",
                "1531367433807312682025183149755809765550713032594249639545280908988893684508",
                "11257786073691445945006425322354162824690552207328468886901192712539419853737",
                "10388607402101332485425207793448049701023228292391641935935658540467894927280",
            ]
            .into_iter()
            .map(|value| BigUint::from_str(value).unwrap().into())
            .collect(),
            aged_selector: [
                "1", "0", "1", "1", "0", "0", "0", "0", "0", "1", "1", "1", "1", "0", "1", "0",
                "1", "1", "0", "0", "1", "0", "1", "0", "0", "1", "1", "1", "0", "0", "1", "0",
            ]
            .into_iter()
            .map(|s| match s {
                "1" => true,
                "0" => false,
                _ => panic!("Invalid value for aged_selector"),
            })
            .collect(),
            latest_path: [
                "9552223529749032752479584703519744136024543042456037208825963889490865353326",
                "17983287448108030884740738663771698206024778269905806928153932685875680450801",
                "2460231235431616447786586966122138097137116410124308798237737004354031645773",
                "13740464831061839291909703845242975535403233525998854316264674945989422717254",
                "11394249925905686717943936955055129713031145801895949031207371113491474526820",
                "3569331458975331097935488164797538855581933787812871201069206268590547262057",
                "10561791191006734323893098739210915778982454744668493401838589772981073567488",
                "773879201900106248225075384581961183707240966140936217902310752255689247850",
                "422861661391783494033234042937568584917839560848132062242366354719589292422",
                "10514907584659991537843560282988217600456075100936461720998925558530854636397",
                "13907071331929380301795420199689942945960533888964274648310247175799657751488",
                "18058296039857176018308951155393802092371858288124370039008573873315684176509",
                "12173553207207089561742046599637369974415124957162456528554001250859265484339",
                "19877068590404856479311302347287543992003911827086899906627373947063274825542",
                "5992168040158840355086921839863045794107432180250722030592999802716471448065",
                "16611911323992927855699208720933441828522356793488934595555268703125594903154",
                "9097523976024944804697709192309064802758540787237148979257695176847717794523",
                "1280158000137571324502815416486193334950528644173893258032628532977751257818",
                "19039885425158241256475552354800312901200951590685640874517856508986625714257",
                "19704067677166936902040468391408793907423871455893940765513554019090492853190",
                "5590003567626631914939006762563612612105155893310977497049567119128126776682",
                "5239386002963231300663624434314690904577703042694220533057752137824516322131",
                "7536195037302643781280460248914191533016343314568701690950553208813880327878",
                "16136877309330275411602501400740099149990384122819008247399469965881136734015",
                "8489917273887482033549796335710263410582443598558750553535199529714092539121",
                "11613497262559065039826807442281969251672886523123466555913413814136428335933",
                "3558770112212852737827755431638062244508852170237897105445204892124355420142",
                "7682597153543789303180089370914216374425769609958042664166241167530746840372",
                "6493651424662394030123381485993464442123968188588375952829480753199419389828",
                "21843259066690717623938060842380503216011364161557517612226347450648569711904",
                "7661563884441935908199118491436202832085475471690940180666695570126647145931",
                "1540311526345639372161957314124928203054291704187019549297105085227536840560",
            ]
            .into_iter()
            .map(|value| BigUint::from_str(value).unwrap().into())
            .collect(),
            latest_selector: [
                "0", "0", "1", "0", "0", "0", "1", "0", "1", "0", "1", "1", "1", "0", "0", "1",
                "0", "1", "1", "0", "1", "1", "1", "1", "0", "1", "0", "1", "0", "0", "0", "1",
            ]
            .into_iter()
            .map(|s| match s {
                "1" => true,
                "0" => false,
                _ => panic!("Invalid value for aged_selector"),
            })
            .collect(),
            slot_secret: BigUint::from_str(
                "6945759776917971993033499285273299038266055529373925921646865936198958895488",
            )
            .unwrap()
            .into(),
            slot_secret_path: [
                "20275000800939288631498810609559002906609314852885957573601051058124570529739",
                "1957945717826095745587001438272393326719645462596691344621534037953487314738",
                "9568480164268430355185888655555918358062959296263511266546786345895499843575",
                "21306103103301540897354595936648980344751603942421190470430027403443867920828",
                "21350782794860257087764744758603059723703573639376175650142903736414165205386",
                "12714753810400403856558273399295913992144240821438782148418037933137270040275",
                "8550735422193612019488458236962479783976922580532515926985751802241576371601",
                "3343565758038743417215766302757907588627870854504459190850698561557024933102",
                "5181001215431349677031898396726671426226102133955931350854421617918246937574",
                "1597753874786478232313920615953739525405109727561141180344679367639926512820",
                "20358036253293791881333036158443254233279550539260920373448873404148891789911",
                "11656643051280351213548189057678192243385597426196560790104479511886500743562",
                "20688145258094520478871441449055556534318161363774607126113415316234344389617",
                "9594156346951580158981917420263545350288625742472148498781397296636339287422",
                "9360195311310196643178072058558647145386546611335551664555613107551399962114",
                "3672061222221369111991998763758436498471460174310511585717444039766881075868",
                "1342734556982087453803297148689385329191047456581880208627680318352605387353",
                "4504387909258914845068533446025415620798456378275977677001132634429099456024",
                "7677079459416892647680279102819567383316792524849581083356291918792645666159",
                "15434375019109892625743354578136688921788238263061948130172071850835982318925",
                "19318014206114284449289549809188601044500873436254222072642164938244545143913",
                "10711303939754046736333480811031319193688086923904011062344481369711636517789",
                "14446189879597435049107133197739831056493160783414051799042027921951546693518",
                "3892364268928713055126455090903714005589142711447234156525039330926095324263",
                "18018454367266498301753021216836413818846745998850259898514151073804564955408",
            ]
            .into_iter()
            .map(|value| BigUint::from_str(value).unwrap().into())
            .collect(),
            starting_slot: 219,
        };
        let witness_inputs = PolWitnessInputs::from_chain_and_wallet_data(
            chain_data.try_into().unwrap(),
            wallet_data.into(),
        );

        let (proof, inputs) = prove(&witness_inputs).unwrap();
        assert!(verify(&proof, &inputs).unwrap());
    }
}
