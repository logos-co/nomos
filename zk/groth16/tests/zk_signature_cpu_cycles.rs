#[cfg(all(target_arch = "x86_64", feature = "deser"))]
use std::{hint::black_box, ops::Deref as _, sync::LazyLock};

#[cfg(all(target_arch = "x86_64", feature = "deser"))]
use groth16::{
    Groth16Proof, Groth16ProofJsonDeser, Groth16PublicInput, Groth16PublicInputDeser,
    Groth16VerificationKey, Groth16VerificationKeyJsonDeser, groth16_verify,
};
#[cfg(all(target_arch = "x86_64", feature = "deser"))]
use serde_json::{Value, json};
use groth16::groth16_batch_verify;

#[cfg(all(target_arch = "x86_64", feature = "deser"))]
static VK: LazyLock<Value> = LazyLock::new(|| {
    json!({
     "protocol": "groth16",
     "curve": "bn128",
     "nPublic": 33,
     "vk_alpha_1": [
      "20491192805390485299153009773594534940189261866228447918068658471970481763042",
      "9383485363053290200918347156157836566562967994039712273449902621266178545958",
      "1"
     ],
     "vk_beta_2": [
      [
       "6375614351688725206403948262868962793625744043794305715222011528459656738731",
       "4252822878758300859123897981450591353533073413197771768651442665752259397132"
      ],
      [
       "10505242626370262277552901082094356697409835680220590971873171140371331206856",
       "21847035105528745403288232691147584728191162732299865338377159692350059136679"
      ],
      [
       "1",
       "0"
      ]
     ],
     "vk_gamma_2": [
      [
       "10857046999023057135944570762232829481370756359578518086990519993285655852781",
       "11559732032986387107991004021392285783925812861821192530917403151452391805634"
      ],
      [
       "8495653923123431417604973247489272438418190587263600148770280649306958101930",
       "4082367875863433681332203403145435568316851327593401208105741076214120093531"
      ],
      [
       "1",
       "0"
      ]
     ],
     "vk_delta_2": [
      [
       "10857046999023057135944570762232829481370756359578518086990519993285655852781",
       "11559732032986387107991004021392285783925812861821192530917403151452391805634"
      ],
      [
       "8495653923123431417604973247489272438418190587263600148770280649306958101930",
       "4082367875863433681332203403145435568316851327593401208105741076214120093531"
      ],
      [
       "1",
       "0"
      ]
     ],
     "vk_alphabeta_12": [
      [
       [
        "2029413683389138792403550203267699914886160938906632433982220835551125967885",
        "21072700047562757817161031222997517981543347628379360635925549008442030252106"
       ],
       [
        "5940354580057074848093997050200682056184807770593307860589430076672439820312",
        "12156638873931618554171829126792193045421052652279363021382169897324752428276"
       ],
       [
        "7898200236362823042373859371574133993780991612861777490112507062703164551277",
        "7074218545237549455313236346927434013100842096812539264420499035217050630853"
       ]
      ],
      [
       [
        "7077479683546002997211712695946002074877511277312570035766170199895071832130",
        "10093483419865920389913245021038182291233451549023025229112148274109565435465"
       ],
       [
        "4595479056700221319381530156280926371456704509942304414423590385166031118820",
        "19831328484489333784475432780421641293929726139240675179672856274388269393268"
       ],
       [
        "11934129596455521040620786944827826205713621633706285934057045369193958244500",
        "8037395052364110730298837004334506829870972346962140206007064471173334027475"
       ]
      ]
     ],
     "IC": [
      [
       "5655413703151327290665581077318551862173061724400487188079932185803116964836",
       "12711916895014663294362367148390962266481019255024512157367697646742296003299",
       "1"
      ],
      [
       "17037444915622623439384678062534815037425287724047922048243617637510328372146",
       "540651216787580381453073120517067548617335335343900492428198409450571205383",
       "1"
      ],
      [
       "5181751743984086936534533192561871954487593010980932306467087674116841400908",
       "5201038001013483386709080707202500583568253211224574027842377428316603213836",
       "1"
      ],
      [
       "830485225172132760306276131539173314973699145060129390786863784566185661800",
       "13411389780469736806691893678084652179286536253648850965984193239489329124319",
       "1"
      ],
      [
       "13584445824619692803780245844523257998121748300432785405183512844897954072012",
       "3349833827190243867790131475628665851291748802462507764362372329766734483833",
       "1"
      ],
      [
       "5260798823042105154113568765008250716012041586830497560505553654500389256589",
       "1279645030924054941288193585113157454109443079663504417141641070541675984810",
       "1"
      ],
      [
       "13521587573651351431151767702313035419984807114811230901464676746201771403656",
       "6354581532045239049377025853248024189221904921194679389560854860250079892529",
       "1"
      ],
      [
       "11555427603885643174247652327477562672268230474049196108983104746173653386681",
       "8839753497566423690020954134998342879395699113254760924248026803150397908920",
       "1"
      ],
      [
       "13734242865359008750497131925967342416320704979378967187222199980808329889758",
       "5601068605609000221098983680943580556352671397548792136751122410263275370424",
       "1"
      ],
      [
       "16089918339854722948542590829726039385594993289413453212746918793676942871901",
       "9851655962657183358469039150493734660787262168339700361219721125569248634844",
       "1"
      ],
      [
       "3596000995530943420098004223135000296133688765320849235698641375709998857872",
       "9625346038275112091191155766131956515213283205539875215527705629354304994616",
       "1"
      ],
      [
       "15876951714082232525275576297878096077389469078180826271140057970979474475948",
       "15331779248774842821515398658471214806352206676076876827470206451593929615533",
       "1"
      ],
      [
       "21434742956434008062975410448896267134390139648779939470980897721718237272093",
       "4664599345860314348722704065500625174095789535043639021133754755316313427120",
       "1"
      ],
      [
       "1979063938734590845970370546311729831587245410362276821719917639121271858148",
       "12342359144384767486024953251689556013682706363456151519056017680694496457137",
       "1"
      ],
      [
       "8480499486370167608486011393746526755624700270706194862796594632287211648748",
       "8594836745431418809626207530873264379774491928045880849524980229828185815149",
       "1"
      ],
      [
       "20557324467093652223359071744516811427415085319530367265101051380721984750562",
       "2543054372972890919716059873878431701535443362837662369101432817651988522847",
       "1"
      ],
      [
       "12304935852103210048177116955145749491649646057928034393193771658939817635633",
       "17709427301886074761409749364769204232834069934509672151062348201387220345509",
       "1"
      ],
      [
       "3508899114291066259271962523306495127908959355825744339406262249154010607650",
       "5541876329311437459852567990255640522504457805683806481002086965996746588819",
       "1"
      ],
      [
       "16488359574840787338031610032804903875695696329047357558418984600363712484861",
       "11595259046753954905901179380006694756460799522771352742625876676587332685521",
       "1"
      ],
      [
       "20882318184576002798413850842900440449450017318430408955219571248212241601568",
       "18763454361663877680695551934601414704389137833754131940750959797197570733420",
       "1"
      ],
      [
       "1818403527507273919698214234728854744949056624045632978401618216968469617940",
       "12110565589815298630204989935572956416260586196283361520563050625035562310886",
       "1"
      ],
      [
       "5124292880032667538035069612503790021643736732651734861497826133692017084953",
       "20957580952085137088897504815259717339144980668040968869880056765297751011164",
       "1"
      ],
      [
       "304127474276787214375290432503702625626910185733517530326249032192268892801",
       "19776270945052629395741433495145501682027995186356367589720862198341933181251",
       "1"
      ],
      [
       "21470365704520291850478827831019249852278950123224636621387976163068629720800",
       "6058843368388994797055660833992873332915183545767628698513470720026995400702",
       "1"
      ],
      [
       "5097447516400998335393684204443795164938523840513754734878844102437736615062",
       "5765080597882132408863761938937929992435909908086833574611546715591030716943",
       "1"
      ],
      [
       "19291372967157949895122808982589049424928542786738264970409048552142788643938",
       "21041962907985626844391266647001422264771084769965240464072301636517183326274",
       "1"
      ],
      [
       "1812013297200654132323273613339954286326096354859858478588736301769190760126",
       "10789385608752838841208144159631258972471462284078625614803983472281827773070",
       "1"
      ],
      [
       "21414556118519352668318899959701099472247534501210626298121256345284669315438",
       "8625911022068503481631587790721246118763752745194393806440301494601955891241",
       "1"
      ],
      [
       "15465898863573476000787065304397186259154023301606988078795029772566390787813",
       "18054486985907391982137318510248530807636263720599697708403077430807000662959",
       "1"
      ],
      [
       "2798422822355658565098212402874795609623550328753383644715535035713134231247",
       "1062550450910221159278331129548266067760193414357648854698719284204603036701",
       "1"
      ],
      [
       "12197187581380549124118756159828112540039576252478133144552504998055073824879",
       "15126636802365585019067076258470055447565086758388433698878877555940321307373",
       "1"
      ],
      [
       "4242063308334574497306442902064609976801046976662229242367122468350057293433",
       "6866309906407693236614667581760715143883916837840219493879291940999873010145",
       "1"
      ],
      [
       "18405760405838974143984172216713216964805259642560682642777864215797781066620",
       "14918996073762773214226110118717715253397009506332354255720891085500961730032",
       "1"
      ],
      [
       "18262621283626597594715355158546765366153754093491752947481217593462108380306",
       "15876688929333460332101473228919336802415077426622786101714965218844637778318",
       "1"
      ]
     ]
    })
});

#[cfg(all(target_arch = "x86_64", feature = "deser"))]
static PROOF: LazyLock<Value> = LazyLock::new(|| {
    json!({
      "pi_a": [
        "16390790026225836896928217926596217842438881675666464710123091623025840801736",
        "1685780937369835527111534701915250050588236816572097053707443546933660100194",
        "1"
      ],
      "pi_b": [
        [
          "12935597892495766841530154812987849785929637319439240071146504661403185651846",
          "11727398855679118019613141926499422576394871568917522598304198421770797783594"
        ],
        [
          "15644719080056122547208591941045936150518210043708734768994087901458508860254",
          "5284349747488213117188270363331618480013561196411807345314551901528442561236"
        ],
        [
          "1",
          "0"
        ]
      ],
      "pi_c": [
        "20784481812286023207296281619958115185081284885549081002309270270295746693845",
        "12457915098714595781734060863723441651532198702692998464094990295974066424526",
        "1"
      ],
      "protocol": "groth16",
      "curve": "bn128"
    })
});

#[cfg(all(target_arch = "x86_64", feature = "deser"))]
static PI: LazyLock<Value> = LazyLock::new(|| {
    json!([
        "11102268276218687325310228860756729608041551000326452964785954128433899301016",
        "3996681245019295458382446767685262919692363087617606213345010884112784454003",
        "14785027717594781264359674012774244618966131012581089402433978180992202903623",
        "16024616236858612209542650437106485133026594089447119330142647254099337510574",
        "14489671821651155694062223372930083902322037577637493744728608659807253392956",
        "5097167987138304230608468036545249490942283029632786123152295619916245786729",
        "18220320477279044224815547581990251665365934692442461118856509060803839153722",
        "17386914242258208298401850047710966008932857829769030751476498281871031682592",
        "14226765735190302086566773460284193002159004307565216987261700021289898602352",
        "5064852104275259165350366030626917519455056781911094839605263043716639374760",
        "7758511211933838455403607561885233201499138007677025989336897401040637923108",
        "5656977746835728827971960130472324154528194502876140146290178383459333465100",
        "8542893281013734384516426516616596151449605835521910304968309897099379835870",
        "10618373290177360715246636694882229112423299397742260876357358687566553551904",
        "13564053127787442735585734675099498252994559765512852021802014743392660932570",
        "20874714725972494679118362990551125673617836940102247626278267070538055631097",
        "11543593413634720899782726822370149063254163927393063526429800435909112125276",
        "8426262393472613495175366535820816389341403840222865075601322962638871263012",
        "13555731534836906781786239840717110632089475882762721026787162488149091882616",
        "12137102184569770311471305123051532233084054445727704615726594443991078713573",
        "16179374809396067856058268868267789244829797573990238808381713418620519959553",
        "14731607985307879661420433692119025322642293684592389183012308738297901457803",
        "13462441385742469141832040352719256700439609454264571996642813026440159800422",
        "3153328429124557053745734333014040628728479361973552858672998096946479932442",
        "12950654630547960208533806045722970846506756550345697105392565959711759348735",
        "1267512788109910710056077931403940000128949950571138924965385737379344496563",
        "21238437619188954838238229132668689395338159568553389566457680402732609772878",
        "14966231380518001161716922735032813131186084204218538939490069412611523376981",
        "11994963055076198317466081061361900184605923981272042560475818453373563904847",
        "16076597550283021892811991677718418274912563725057914202042407732318398008825",
        "13658995247662270242087538400662075749457608225588221848218815910705952030022",
        "16102436983723100112163186243709757143808870879126875071657936001319470211814",
        "1067876409446105758643738371900264082356921730859024709530278137185226768179"
    ])
});

// TODO: Remove this when we have the proper benches in the proofs
#[cfg(all(target_arch = "x86_64", feature = "deser"))]
#[expect(
    clippy::undocumented_unsafe_blocks,
    reason = "This test is is just to measure cpu and should be run manually"
)]
#[ignore = "This test is just for calculation the cycles for the above set of proofs. This will be moved to the pertinent proof in the future."]
#[test]
fn zk_signature_cpu_cycles() {
    let proof: Groth16Proof =
        serde_json::from_value::<Groth16ProofJsonDeser>(PROOF.deref().clone())
            .unwrap()
            .try_into()
            .unwrap();
    let vk: Groth16VerificationKey =
        serde_json::from_value::<Groth16VerificationKeyJsonDeser>(VK.deref().clone())
            .unwrap()
            .try_into()
            .unwrap();
    let pi: Vec<_> = serde_json::from_value::<Vec<Groth16PublicInputDeser>>(PI.deref().clone())
        .unwrap()
        .into_iter()
        .map(TryInto::<Groth16PublicInput>::try_into)
        .collect::<Result<Vec<_>, _>>()
        .unwrap()
        .into_iter()
        .map(Groth16PublicInput::into_inner)
        .collect();
    let pvk = vk.into_prepared();
    let iters = 100u64;
    let pre = unsafe { core::arch::x86_64::_rdtsc() };
    for _ in 0..iters {
        black_box(groth16_verify(&pvk, &proof, &pi).expect("success"));
    }
    let post = unsafe { core::arch::x86_64::_rdtsc() };
    let cycles = (post - pre) / iters;
    println!("This proof has {} public inputs", pi.len()-1);
    println!("zk-signature-cycles-count: {cycles} cpu cycles");

    for batch_size in 1..10 {
        let proofs_batch: Vec<Groth16Proof> = (0..batch_size)
            .map(|_| {
                serde_json::from_value::<Groth16ProofJsonDeser>(PROOF.deref().clone())
                    .unwrap()
                    .try_into()
                    .unwrap()
            })
            .collect();
        let pi_batch: Vec<Vec<_>> = std::iter::repeat_with(|| pi.clone()).take(batch_size).collect();
        let pre = unsafe { core::arch::x86_64::_rdtsc() };
        for _ in 0..iters {
            black_box(groth16_batch_verify(&pvk, &proofs_batch, &pi_batch));
        }
        let post = unsafe { core::arch::x86_64::_rdtsc() };
        let cycles = (post - pre) / iters;
        println!("batched-zk-signature-cycles-count: {cycles} cpu cycles for batch {batch_size} batches");
    }
    for batch_size in (10..201).step_by(10) {
        let proofs_batch: Vec<Groth16Proof> = (0..batch_size)
            .map(|_| {
                serde_json::from_value::<Groth16ProofJsonDeser>(PROOF.deref().clone())
                    .unwrap()
                    .try_into()
                    .unwrap()
            })
            .collect();
        let pi_batch: Vec<Vec<_>> = std::iter::repeat_with(|| pi.clone()).take(batch_size).collect();
        let pre = unsafe { core::arch::x86_64::_rdtsc() };
        for _ in 0..iters {
            black_box(groth16_batch_verify(&pvk, &proofs_batch, &pi_batch));
        }
        let post = unsafe { core::arch::x86_64::_rdtsc() };
        let cycles = (post - pre) / iters;
        println!("batched-zk-signature-cycles-count: {cycles} cpu cycles for batch {batch_size} batches");
    }
}
