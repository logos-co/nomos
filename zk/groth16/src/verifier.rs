use std::{
    error::Error,
    ops::{Mul as _, Neg as _},
};

use ark_bn254::{Bn254, Fr, G1Affine, G1Projective};
use ark_ec::{CurveGroup as _, VariableBaseMSM as _, pairing::Pairing};
use ark_ff::{UniformRand as _, Zero as _};
use ark_groth16::{Groth16, r1cs_to_qap::LibsnarkReduction};
use ark_relations::r1cs::Result as R1CSResult;
use ark_std::rand::thread_rng;

use crate::{proof::Proof, verification_key::PreparedVerificationKey};

pub fn groth16_verify<E: Pairing>(
    vk: &PreparedVerificationKey<E>,
    proof: &Proof<E>,
    public_inputs: &[E::ScalarField],
) -> Result<bool, impl Error + use<E>> {
    let proof: ark_groth16::Proof<E> = proof.into();
    Groth16::<E, LibsnarkReduction>::verify_proof(vk.as_ref(), &proof, public_inputs)
}

pub fn groth16_batch_verify(
    vk: &PreparedVerificationKey<Bn254>,
    proofs: &[Proof<Bn254>],
    public_inputs: &[Vec<Fr>],
) -> R1CSResult<bool> {
    let mut rng = thread_rng();
    let r = Fr::rand(&mut rng);
    let r_roots = compute_r_powers(r, proofs.len());
    let r_sum: Fr = r_roots.iter().sum();

    let pis_c: Vec<G1Affine> = proofs.iter().map(|proof| proof.pi_c).collect();

    let batched_pi_c = G1Projective::msm(&pis_c, &r_roots).unwrap().into_affine();

    let batched_public_inputs: Vec<Fr> = std::iter::once(r_sum)
        .chain((0..public_inputs[0].len()).map(|i| {
            r_roots
                .iter()
                .zip(public_inputs.iter())
                .map(|(r, pi)| *r * pi[i])
                .sum()
        }))
        .collect();

    let batched_ic = G1Projective::msm(&vk.vk.vk.gamma_abc_g1, &batched_public_inputs)
        .unwrap()
        .into_affine();

    let mut g1_terms: Vec<_> = Vec::with_capacity(proofs.len() + 3);
    let mut g2_terms: Vec<_> = Vec::with_capacity(proofs.len() + 3);

    for (i, proof) in proofs.iter().enumerate() {
        g1_terms.push(proof.pi_a.mul(r_roots[i]).into_affine());
        g2_terms.push(proof.pi_b.into());
    }
    g1_terms.push(vk.vk.vk.alpha_g1.mul(r_sum).neg().into());
    g2_terms.push(vk.vk.vk.beta_g2.into());
    g1_terms.push(batched_ic);
    g2_terms.push(vk.vk.gamma_g2_neg_pc.clone());
    g1_terms.push(batched_pi_c);
    g2_terms.push(vk.vk.delta_g2_neg_pc.clone());

    let test = Bn254::multi_pairing(g1_terms, g2_terms);
    Ok(test.is_zero())
}

fn compute_r_powers(r: Fr, size: usize) -> Vec<Fr> {
    std::iter::successors(Some(Fr::from(1)), |x| Some(r * x))
        .take(size)
        .collect()
}

#[cfg(all(test, feature = "deser"))]
mod tests {
    use std::{ops::Deref as _, sync::LazyLock};

    use serde_json::{Value, json};

    use super::*;
    use crate::{
        Groth16Input, Groth16InputDeser, Groth16Proof, Groth16ProofJsonDeser,
        Groth16VerificationKey, Groth16VerificationKeyJsonDeser,
    };

    static VK: LazyLock<Value> = LazyLock::new(|| {
        json!({
          "protocol": "groth16",
          "curve": "bn128",
          "nPublic": 8,
          "vk_alpha_1": [
            "20491192805390485299153009773594534940189261866228447918068658471970481763042",
            "9383485363053290200918347156157836566562967994039712273449902621266178545958",
            "1"
          ],
          "vk_beta_2": [
            [
              "6375614351688725206403948262868962793625744043794305715222011528459656738731",
              "4252822878758300859123897981450591353533073413197771768651442665752259397132"
            ],
            [
              "10505242626370262277552901082094356697409835680220590971873171140371331206856",
              "21847035105528745403288232691147584728191162732299865338377159692350059136679"
            ],
            [
              "1",
              "0"
            ]
          ],
          "vk_gamma_2": [
            [
              "10857046999023057135944570762232829481370756359578518086990519993285655852781",
              "11559732032986387107991004021392285783925812861821192530917403151452391805634"
            ],
            [
              "8495653923123431417604973247489272438418190587263600148770280649306958101930",
              "4082367875863433681332203403145435568316851327593401208105741076214120093531"
            ],
            [
              "1",
              "0"
            ]
          ],
          "vk_delta_2": [
            [
              "10857046999023057135944570762232829481370756359578518086990519993285655852781",
              "11559732032986387107991004021392285783925812861821192530917403151452391805634"
            ],
            [
              "8495653923123431417604973247489272438418190587263600148770280649306958101930",
              "4082367875863433681332203403145435568316851327593401208105741076214120093531"
            ],
            [
              "1",
              "0"
            ]
          ],
          "vk_alphabeta_12": [
            [
              [
                "2029413683389138792403550203267699914886160938906632433982220835551125967885",
                "21072700047562757817161031222997517981543347628379360635925549008442030252106"
              ],
              [
                "5940354580057074848093997050200682056184807770593307860589430076672439820312",
                "12156638873931618554171829126792193045421052652279363021382169897324752428276"
              ],
              [
                "7898200236362823042373859371574133993780991612861777490112507062703164551277",
                "7074218545237549455313236346927434013100842096812539264420499035217050630853"
              ]
            ],
            [
              [
                "7077479683546002997211712695946002074877511277312570035766170199895071832130",
                "10093483419865920389913245021038182291233451549023025229112148274109565435465"
              ],
              [
                "4595479056700221319381530156280926371456704509942304414423590385166031118820",
                "19831328484489333784475432780421641293929726139240675179672856274388269393268"
              ],
              [
                "11934129596455521040620786944827826205713621633706285934057045369193958244500",
                "8037395052364110730298837004334506829870972346962140206007064471173334027475"
              ]
            ]
          ],
          "IC": [
            [
              "12435027896306279335193308081547588397707908354296203708986426498811137282805",
              "1442224100712712328150106930749826054966358757418009409064262428311438297589",
              "1"
            ],
            [
              "6735289222268620887967101274979053291171490931365310833145702788124436306172",
              "9508959186325531371812230880333707564381251143253667590318797673905874656876",
              "1"
            ],
            [
              "18473388283757542137959421863159345574612491564845354899214639118208041462528",
              "18694560805112314918061014137720005546519432757072656793585858269938858875786",
              "1"
            ],
            [
              "14967980733094356746724483499152644406535805007874369203174937895115670061148",
              "21728985130787642996653019574511069426374543279373944744758299867225875316207",
              "1"
            ],
            [
              "2382193504388354063042061240913607011189297257126245603646126957113028251067",
              "3186788563303315565192587592243750128841672669733123922563414054674374354455",
              "1"
            ],
            [
              "18815251261767293524033866532395010820316526629864592538806627807808874450256",
              "14404431525267621164746248685134916870545882017438687959827868761075391115140",
              "1"
            ],
            [
              "2878782699870421548853699842350275130789491211417932280378631526118618555825",
              "13892724600248241307159136198318007050224821820754006064007333455611109868450",
              "1"
            ],
            [
              "579707933191239712100492334635245879466181955226065917287512793704772026173",
              "1238995256577015863996826154249942452365261008855283188563957554395031762036",
              "1"
            ],
            [
              "14018877585297879644865038142378378343065417965038921806374979044606559378166",
              "19185248721619886855032100865444975713606706368794309022191613560536985285760",
              "1"
            ]
          ]
        })
    });

    static PROOF: LazyLock<Value> = LazyLock::new(|| {
        json!({
          "pi_a": [
            "8296175608850998036255335084231000907125502603097068078993517773809496732066",
            "8263160927867860156491312948728748265016489542834411322655068343855704802368",
            "1"
          ],
          "pi_b": [
            [
              "21630590412244703770464699084160733144935501859194730009968664948222752546282",
              "2360176260887090528387414040841390178721803616623769558861196687249493928600"
            ],
            [
              "19520030071777612089051083418787870247443252641482678846010900794231980067541",
              "10365922284519340998921178202220836853052351283418810378278857066381010824566"
            ],
            [
              "1",
              "0"
            ]
          ],
          "pi_c": [
            "6696664968468451496397455124742234961189848064077552976860754045639269197981",
            "6523385944235793127051945618289282151393577593495757596060209123245519772531",
            "1"
          ],
          "protocol": "groth16",
          "curve": "bn128"
        })
    });

    static PI: LazyLock<Value> = LazyLock::new(|| {
        json!([
            "20355411533518962316551583414021767695266024416654937381718858980374314628607",
            "10",
            "125",
            "224544017050291497731587917515395456590972751373195855321023608221038158",
            "21888242870687514985294027879163787319377618759420784645983712289047175144239",
            "2560908565912827287507552665784789358607566611809861439260962961981744707910",
            "16032654658264631097783850361980666012858215179400660002665145514335493567351",
            "516548"
        ])
    });
    #[test]
    fn test_verify() {
        let proof: Groth16Proof =
            serde_json::from_value::<Groth16ProofJsonDeser>(PROOF.deref().clone())
                .unwrap()
                .try_into()
                .unwrap();
        let vk: Groth16VerificationKey =
            serde_json::from_value::<Groth16VerificationKeyJsonDeser>(VK.deref().clone())
                .unwrap()
                .try_into()
                .unwrap();
        let pi: Vec<_> = serde_json::from_value::<Vec<Groth16InputDeser>>(PI.deref().clone())
            .unwrap()
            .into_iter()
            .map(TryInto::<Groth16Input>::try_into)
            .collect::<Result<Vec<_>, _>>()
            .unwrap()
            .into_iter()
            .map(Groth16Input::into_inner)
            .collect();
        let pvk = vk.into_prepared();
        assert!(groth16_verify(&pvk, &proof, &pi).is_ok());
    }
}
