name: Packaging and Distribution

on:
  pull_request:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release. Must follow the format of 'vX.Y.Z'."
        required: true
        default: "v0.0.0"

jobs:
  determine-version:
    name: "Determine version"
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.define-version.outputs.VERSION }}
    steps:
      - name: Define version
        id: define-version
        env:
          # Use the tag name if it is available, otherwise use the input version.
          # This enables calling from the GitHub UI.
          VERSION: ${{ github.event.release.tag_name || inputs.version || 'v0.1.0' }}
        run: |
          if [ -z "$VERSION" ]; then
            echo "Could not determine version."
            exit 1
          elif [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "VERSION must follow the format of 'vX.Y.Z'. Value: '$VERSION'."
            exit 2
          fi

          # Export the version to be used in the following jobs.
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

  package:
    name: "Packaging for ${{ matrix.platform.arch }}-${{ matrix.platform.os }}"
    needs: determine-version
    env:
      VERSION: ${{ needs.determine-version.outputs.VERSION }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          # - os: linux
          #   arch: amd64
          #   builder: ubuntu-24.04
          #   target_triple: x86_64-unknown-linux-gnu
          # - os: linux
          #   arch: i686
          #   builder: ubuntu-24.04
          #   target_triple: i686-unknown-linux-gnu
          - os: macos
            arch: aarch64
            builder: macos-14
            target_triple: aarch64-apple-darwin
          # # `rzup` not available for this platform yet.
          # - os: macos
          #   arch: amd64
          #   builder: macos-13
          #   target_triple: x86_64-apple-darwin
          # - os: windows
          #   arch: amd64
          #   builder: windows-2022
          #   target_triple: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.platform.builder }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1
        name: Install Rust toolchain
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.platform.target_triple }}

      - name: Install dependencies
        uses: ./.github/actions/install-dependencies
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          os: ${{ matrix.platform.os }}
          target_triple: ${{ matrix.platform.target_triple }}

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all --no-default-features --target ${{ matrix.platform.target_triple }}

      - name: Bundle
        run: |
          #          # Define version parameter for the binary
          #          PARAMETER="-v ${{ env.VERSION }}"
          #          
          #          if [[ ${{ github.event.act || false }} == true ]]; then
          #            echo "This workflow is running using ACT, the parameter version will be removed for debugging. The workflow 
          #          version need not match the binary version." 
          #            PARAMETER=""
          #          fi

          ./target/${{ matrix.platform.target_triple }}/debug/bundle-nomos-node # $PARAMETER # TODO: Uncomment this line when ready

      - name: Upload RPM
        if: matrix.platform.os == 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: "nomos-node_${{ env.VERSION }}_${{ matrix.platform.arch }}.rpm"
          path: "target/${{ matrix.platform.target_triple }}/debug/bundle/rpm/nomos-node-${{ env.VERSION }}-.x86_64.rpm"
          if-no-files-found: error

      - name: Upload DEB
        if: matrix.platform.os == 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: "nomos-node_${{ env.VERSION }}_${{ matrix.platform.arch }}.deb"
          path: "target/${{ matrix.platform.target_triple }}/debug/bundle/deb/nomos-node_${{ env.VERSION }}_amd64.deb"
          if-no-files-found: error

      - name: Upload AppImage
        if: matrix.platform.os == 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: "nomos-node_${{ env.VERSION }}_${{ matrix.platform.arch }}.AppImage"
          path: "target/${{ matrix.platform.target_triple }}/debug/bundle/appimage/nomos-node_${{ env.VERSION }}_amd64.AppImage"
          if-no-files-found: error

      - name: Upload DMG
        if: matrix.platform.os == 'macos'
        uses: actions/upload-artifact@v4
        with:
          name: "nomos-node_${{ env.VERSION }}_${{ matrix.platform.arch }}.dmg"
          path: "target/${{ matrix.platform.target_triple }}/debug/bundle/dmg/nomos-node_${{ env.VERSION }}_${{ matrix.platform.arch }}.dmg"
          if-no-files-found: error

      - name: Upload MSI
        if: matrix.platform.os == 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: "nomos-node_${{ env.VERSION }}_${{ matrix.platform.arch }}.msi"
          path: "target/${{ matrix.platform.target_triple }}/debug/bundle/msi/nomos-node_${{ env.VERSION }}_amd64.msi"
          if-no-files-found: error

  create-release:
    name: "Create release"
    needs:
      - determine-version # Implicit dependency due to `package` also needing it
      - package
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.determine-version.outputs.VERSION }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Debug artifacts
        run: |
          ls -la
          echo "####"
          ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'

      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Nomos Node ${{ env.VERSION }}
          body: |
            This is the release of Nomos Node ${{ env.VERSION }}.
            ## Changelog
            - feature(X): new feature
            - fix(Y): bug description
            - feature: performance improvement on Z
          draft: true
          prerelease: false

      - name: Upload RPM asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BINARY_NAME: nomos-node_${{ env.VERSION }}_amd64.rpm
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.BINARY_NAME }}
          asset_name: ${{ env.BINARY_NAME }}
          asset_content_type: application/x-rpm

      - name: Upload DEB asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BINARY_NAME: nomos-node_${{ env.VERSION }}_amd64.deb
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.BINARY_NAME }}
          asset_name: ${{ env.BINARY_NAME }}
          asset_content_type: application/x-deb

      - name: Upload AppImage asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BINARY_NAME: nomos-node_${{ env.VERSION }}_amd64.AppImage
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.BINARY_NAME }}
          asset_name: ${{ env.BINARY_NAME }}
          asset_content_type: application/x-AppImage

      - name: Upload DMG asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BINARY_NAME: nomos-node_${{ env.VERSION }}_${{ matrix.platform.arch }}.dmg
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.BINARY_NAME }}
          asset_name: ${{ env.BINARY_NAME }}
          asset_content_type: application/x-dmg

      - name: Upload MSI asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BINARY_NAME: nomos-node_${{ env.VERSION }}_amd64.msi
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/${{ env.BINARY_NAME }}
          asset_name: ${{ env.BINARY_NAME }}
          asset_content_type: application/x-msi
