on:
  pull_request:
  push:
    branches: [ master ]

name: Code checks

concurrency:
  group: ${{ github.workflow }}@${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-dependencies-graph:
    name: Check dependencies graph
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2  # Version 4.2.2
      - name: Check cargo version
        run: cargo --version
      - name: Install cargo-depgraph
        run: cargo install cargo-depgraph@1.6.0
      - name: Generate new graph
        run: cargo depgraph --all-deps --dedup-transitive-deps --workspace-only --all-features > ${{ runner.temp }}/dependencies_graph.dot
      - name: Compare dependency graphs
        run: |
          diff dependencies_graph.dot ${{ runner.temp }}/dependencies_graph.dot || exit 1
  formatting:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2  # Version 4.2.2
      - name: Install nightly toolchain
        uses: actions-rs/toolchain@88dc2356392166efad76775c878094f4e83ff746  # Version 1.0.6
        with:
          # The same version must be used in the `.pre-commit-config.yaml` file
          toolchain: nightly-2025-06-23
          profile: minimal
          components: rustfmt
          override: true
      - name: Run cargo fmt
        uses: actions-rs/cargo@9e120dd99b0fbad1c065f686657e914e76bd7b72  # Version 1.0.1
        with:
          command: fmt
          args: --all --check
      - name: Install taplo CLI
        run: cargo install taplo-cli --locked --version 0.9.3
      - name: Run taplo lint
        run: taplo lint
      - name: Run taplo fmt
        run: taplo fmt --check

  cargo-deny:
    name: Check cargo-deny rules
    # `cargo-deny` action is only supported on Linux
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2  # Version 4.2.2
      - name: Run `cargo deny`
        uses: EmbarkStudios/cargo-deny-action@34899fc7ba81ca6268d5947a7a16b4649013fea1 # Version 2.0.11
        with:
          # All is set in the config file
          arguments:
          command-arguments: "--hide-inclusion-graph -c .cargo-deny.toml --show-stats -D warnings"

  features:
    name: Check packages feature combinations
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2  # Version 4.2.2
      - name: Install cargo-hack
        uses: taiki-e/install-action@5651179950649c44da31d346537e20c0534f0f25  # Version 2.49.35
        with:
          tool: cargo-hack
      - name: Set up Cargo cache
        uses: ./.github/actions/setup-cargo-cache
        with:
          key: ${{ github.ref }}->${{ github.workflow }}->${{ github.job }}->${{ matrix.os }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Run cargo-hack
        env:
          RISC0_SKIP_BUILD: true
          RUSTFLAGS: -D warnings
        run: cargo hack --feature-powerset --no-dev-deps check
      - name: Update Cargo cache
        if: success() || failure()
        uses: ./.github/actions/update-cargo-cache
        with:
          key: ${{ github.ref }}->${{ github.workflow }}->${{ github.job }}->${{ matrix.os }}

  unused-deps:
    name: Check for unused dependencies
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2  # Version 4.2.2
      - name: Install cargo-machete
        uses: bnjbvr/cargo-machete@9f0895d780783da0089162cae9668f6ec6e896c4  # Version 0.8.0
        # This step also runs `cargo-machete` without the `--with-metadata` flag, which can trigger more false positives.
        # We ignore errors and run `cargo-machete` with the `--with-metadata` flag for the actual result.
        continue-on-error: true
      - name: Run cargo-machete
        run: cargo machete --with-metadata
  
  lints:
    name: Check Rust lints
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    env:
          RISC0_SKIP_BUILD: true
          RUSTFLAGS: -D warnings
    steps:
      - name: Checkout repository
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2  # Version 4.2.2
      - name: Set up Cargo cache
        uses: ./.github/actions/setup-cargo-cache
        with:
          key: ${{ github.ref }}->${{ github.workflow }}->${{ github.job }}->${{ matrix.os }}
          github-token: ${{ secrets.GITHUB_TOKEN }}        
      - name: Run cargo clippy on workspace
        uses: actions-rs/cargo@9e120dd99b0fbad1c065f686657e914e76bd7b72  # Version 1.0.1
        with:
          command: clippy
          args: --all --all-targets --all-features
      - name: Update Cargo cache
        if: success() || failure()
        uses: ./.github/actions/update-cargo-cache
        with:
          key: ${{ github.ref }}->${{ github.workflow }}->${{ github.job }}->${{ matrix.os }}          
      - name: Install risc0 Rust toolchain
        uses: actions-rs/toolchain@88dc2356392166efad76775c878094f4e83ff746  # Version 1.0.6
        with:
          toolchain: 1.88.0
          components: clippy
          override: true
      - name: Run cargo clippy on risc0 crates
        id: risc0-clippy
        # We need to do this way since we can't use `--all-features` for crates outside of the workspace, so we need to lint each crate separately.
        run: |
          cd ./nomos-core/proof_statements
          cargo clippy --all-targets --all-features
          cd ../risc0_proofs
          cargo clippy --all-targets --all-features
 
  tests:
    name: Run test suite
    if: ${{ !startsWith(github.event.pull_request.title, '[WIP]') && !contains(github.event.label.name,  'DO NOT MERGE') }}
    strategy:
      fail-fast: false # all OSes should be tested even if one fails (default: true)
      matrix:
        os:
          # Using self-hosted runners because we were running out of memory on GitHub-hosted runners
          # - [self-hosted, Linux]
          # - [self-hosted, macOS]
          - ubuntu-latest
    runs-on: ${{ matrix.os }}
    env:
      NOMOS_HOME: ${{ github.workspace }}/.home-nix
      NOMOS_CARGO_HOME: ${{ github.workspace }}/.home-nix/.cargo
      NOMOS_RUSTUP_HOME: ${{ github.workspace }}/.home-nix/.rustup
      NOMOS_RISC0_HOME: ${{ github.workspace }}/.home-nix/.risc0
      NOMOS_TARGET_DIR: ${{ github.workspace }}/.home-nix/target-nix
      CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
    steps:
      - name: Checkout repository
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2  # Version 4.2.2

      - name: Setup Nix
        run: |
          chmod +x .github/scripts/nix-develop.sh
          echo "$PWD/.github/scripts" >> "$GITHUB_PATH"
          echo /nix/var/nix/profiles/default/bin >> "$GITHUB_PATH"

      - name: Disable rustup override
        run: rustup override unset

      - name: Ensure ENV
        shell: bash
        env:
          HOME: ${{ env.NOMOS_HOME }}
          CARGO_HOME: ${{ env.NOMOS_CARGO_HOME }}
          RUSTUP_HOME: ${{ env.NOMOS_RUSTUP_HOME }}
          RISC0_HOME: ${{ env.NOMOS_RISC0_HOME }}
        run: |
          set -euo pipefail
          mkdir -p "$HOME" "$CARGO_HOME" "$RUSTUP_HOME" "$RISC0_HOME"
          
          # keep only your toolchain first on PATH now and later steps
          echo "$CARGO_HOME/bin" >> "$GITHUB_PATH"

          # sanitize common leak vars on self-hosted boxes
          unset CARGO_BUILD_TARGET RUSTFLAGS RUSTC_WRAPPER RUSTC_WORKSPACE_WRAPPER RUSTC CARGO_TARGET_DIR          

      - name: Setup Circuits
        uses: ./.github/actions/setup-circuits
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Use Nix glibc/libstdc++ for pol
        shell: nix-develop.sh .#circuits {0}
        run: |
          # POL=$NOMOS_POL
          # INTERP="$(patchelf --print-interpreter "$POL" 2>/dev/null)" # needs patchelf
          
          INTERP_NIX="$(nix eval --raw nixpkgs#glibc.out)/lib64/ld-linux-x86-64.so.2"
          LIBSTDCPP="$(nix eval --raw nixpkgs#stdenv.cc.cc.lib)"
          GMP="$(nix eval --raw nixpkgs#gmp)"
          GLIBC="$(nix eval --raw nixpkgs#glibc)"
          LIBPATH_NIX="$LIBSTDCPP/lib:$GMP/lib:$GLIBC/lib"
          
          # "$INTERP_NIX" --library-path "$LIBPATH_NIX" "$POL" --help
          patchelf --set-interpreter "$INTERP_NIX" --set-rpath "$LIBPATH_NIX" "$NOMOS_POL"
          patchelf --set-interpreter "$INTERP_NIX" --set-rpath "$LIBPATH_NIX" "$NOMOS_PROVER"
          patchelf --set-interpreter "$INTERP_NIX" --set-rpath "$LIBPATH_NIX" "$NOMOS_VERIFIER"
          
          # env -i "$INTERP" --list $POL
          # env -i "$INTERP_NIX" --library-path "$LIBPATH_NIX" --list "$POL"

      - name: Install RISC0 toolchain (pinned)
        shell: nix-develop.sh .#circuits {0}
        env:
          HOME: ${{ env.NOMOS_HOME }}
          CARGO_HOME: ${{ env.NOMOS_CARGO_HOME }}
          RUSTUP_HOME: ${{ env.NOMOS_RUSTUP_HOME }}
          RISC0_HOME: ${{ env.NOMOS_RISC0_HOME }}
          # CARGO_TARGET_DIR: ${{ env.NOMOS_TARGET_DIR }}
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          export PATH="$CARGO_HOME/bin:$PATH"

          # make sure CARGO_HOME exists (you've set it via env)
          mkdir -p "$CARGO_HOME"
          
          # install rzup (version pin optional)
          cargo install --locked rzup@0.5.0
          
          # make rzup available NOW (this step) and in later steps
          export PATH="$CARGO_HOME/bin:$PATH"
          echo "$CARGO_HOME/bin" >> "$GITHUB_PATH"
          
          # use rzup
          # available versions: 3.0.1, 2.3.1
          rzup install rust 1.88.0
          rzup install r0vm 3.0.1
          rzup install cargo-risczero 3.0.1
          # rzup install cpp 2024.1.5
    
          # Sanity: confirm we’ll use the expected toolchain
          which cargo || true
          cargo --version || true
          which rustc || true
          rustc --version || true
          rzup --version || true

      - name: Build
        shell: nix-develop.sh .#circuits {0}
        env:
          HOME: ${{ env.NOMOS_HOME }}
          CARGO_HOME: ${{ env.NOMOS_CARGO_HOME }}
          RUSTUP_HOME: ${{ env.NOMOS_RUSTUP_HOME }}
          RISC0_HOME: ${{ env.NOMOS_RISC0_HOME }}
          # CARGO_TARGET_DIR: ${{ env.NOMOS_TARGET_DIR }}
          DEV_SHELL_DEBUG: "1"
        run: |
          export PATH="$CARGO_HOME/bin:$PATH"
          cargo clean
          cargo build --all-features

#      - name: Test
#        shell: nix-develop.sh .#circuits {0}
#        env:
#          RISC0_DEV_MODE: true
#          CONSENSUS_SLOT_TIME: 5
#        run: |
#          export RISC0_BUILD_LOCKED=1
#          cargo test --all --lib --bins --tests --examples --all-features -p chain-service
#          # cargo test --all --lib --bins --tests --examples --all-features

#      - name: Cargo test
#        shell: nix-develop.sh .#circuits {0}
#        env:
#          RISC0_DEV_MODE: true
#          CONSENSUS_SLOT_TIME: 5
#        run: |
#          # RISC_DEV_MODE=true CONSENSUS_SLOT_TIME=5 cargo test --all --lib --bins --tests --examples --all-features
#          # We don't test benches as they take 6h+, leading to a timeout
#          cargo test --all --lib --bins --tests --examples --all-features

#      - name: Cargo test
#        uses: actions-rs/cargo@9e120dd99b0fbad1c065f686657e914e76bd7b72  # Version 1.0.1
#        env:
#          RISC0_DEV_MODE: true
#          CONSENSUS_SLOT_TIME: 5
#        with:
#          command: test
#          # We don't test benches as they take 6h+, leading to a timeout
#          args: --all --lib --bins --tests --examples --all-features

      - name: Update Cargo cache
        if: success() || failure()
        uses: ./.github/actions/update-cargo-cache
        with:
          key: ${{ github.ref }}->${{ github.workflow }}->${{ github.job }}->${{ join(matrix.os, '_') }}

      - name: Upload integration tests results
        uses: actions/upload-artifact@6027e3dd177782cd8ab9af838c04fd81a07f1d47 # Version 4.6.2
        if: failure()
        with:
          name: integration-test-artifacts-${{ runner.os }}-${{ github.sha }}
          include-hidden-files: true
          path: tests/.tmp*
  
  build-docker:
    name: Trigger Docker build
    runs-on: ubuntu-latest
    needs:
      - formatting
      - cargo-deny
      - features
      - unused-deps
      - lints
      - tests
    env:
      DOCKER_BUILD_WORKFLOW_FILE: build-docker.yml # Change this in case of file renamings
    steps:
      - name: Trigger "Docker build" workflow
        uses: actions/github-script@3908079ba1e7bce10117ad701c321d07e89017a9 # Version 7.0.1
        with:
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: '${{ env.DOCKER_BUILD_WORKFLOW_FILE }}',
              ref: '${{ github.head_ref || github.ref }}',
            })
